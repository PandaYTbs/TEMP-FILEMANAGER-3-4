<div id="header">
    <h1>Editing: {{fileName}}</h1>
</div>

<div id="editor-container">
    <div id="editor-toolbar">
        <button id="save-btn" onclick="saveFile()">Save</button>
        <button id="back-btn" onclick="window.location.href='/filemanager'">Back</button>
        
        <div id="theme-controls">
            <label for="theme-select">Theme:</label>
            <select id="theme-select">
                <option value="dark">Dark</option>
                <option value="light">Light</option>
            </select>
            
            <label for="font-size">Font Size:</label>
            <select id="font-size">
                <option value="12px">Small</option>
                <option value="14px">Medium</option>
                <option value="16px">Large</option>
            </select>
            
            <button onclick="saveConfig()">Apply</button>
        </div>
    </div>
    
    <div id="editor-wrapper">
        <div id="line-numbers"></div>
        <textarea id="editor-content" spellcheck="false">{{fileContent}}</textarea>
    </div>
</div>

<script>
    const editor = document.getElementById('editor-content');
    const lineNumbers = document.getElementById('line-numbers');
    
    function updateLineNumbers() {
        const lines = editor.value.split('\n');
        lineNumbers.innerHTML = lines.map((_, i) => `<div>${i + 1}</div>`).join('');
    }
    
    async function saveFile() {
        try {
            const response = await fetch('/save-file', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    filePath: '{{filePath}}',
                    content: editor.value
                })
            });
            
            const data = await response.json();
            if (!response.ok) throw new Error(data.error || 'Save failed');
            
            showMessage('File saved successfully', 'success');
        } catch (err) {
            console.error('Save error:', err);
            showMessage('Save failed: ' + err.message, 'error');
        }
    }
    
    async function loadConfig() {
        try {
            const response = await fetch('/get-config');
            const config = await response.json();
            
            document.getElementById('theme-select').value = config.theme || 'dark';
            document.getElementById('font-size').value = config.fontSize || '14px';
            applyTheme(config);
        } catch (err) {
            console.error('Config error:', err);
        }
    }
    
    function applyTheme(config) {
        editor.className = config.theme + '-theme';
        lineNumbers.className = config.theme + '-theme';
        editor.style.fontSize = config.fontSize;
    }
    
    async function saveConfig() {
        const config = {
            theme: document.getElementById('theme-select').value,
            fontSize: document.getElementById('font-size').value
        };
        
        try {
            await fetch('/save-config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config)
            });
            applyTheme(config);
            showMessage('Theme applied', 'success');
        } catch (err) {
            console.error('Config save error:', err);
            showMessage('Failed to save theme', 'error');
        }
    }
    
    function showMessage(text, type) {
        const msg = document.createElement('div');
        msg.className = `message ${type}`;
        msg.textContent = text;
        document.body.appendChild(msg);
        setTimeout(() => msg.remove(), 3000);
    }
    
    editor.addEventListener('input', updateLineNumbers);
    window.addEventListener('load', () => {
        updateLineNumbers();
        loadConfig();
    });
</script>

<style>
    #editor-container {
        padding: 20px;
        height: calc(100vh - 100px);
    }
    
    #editor-toolbar {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        align-items: center;
    }
    
    #editor-toolbar button {
        padding: 8px 16px;
        background-color: #0078d7;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    #theme-controls {
        margin-left: auto;
        display: flex;
        gap: 10px;
        align-items: center;
    }
    
    #editor-wrapper {
        display: flex;
        height: calc(100% - 50px);
        border: 1px solid #ddd;
        border-radius: 4px;
        overflow: hidden;
    }
    
    #line-numbers {
        width: 40px;
        padding: 10px;
        font-family: monospace;
        text-align: right;
        overflow-y: hidden;
        user-select: none;
        line-height: 1.5;
    }
    
    #editor-content {
        flex: 1;
        padding: 10px;
        border: none;
        resize: none;
        font-family: monospace;
        line-height: 1.5;
        outline: none;
        white-space: pre;
        tab-size: 4;
    }
    
    .dark-theme {
        background-color: #1e1e1e;
        color: #e0e0e0;
    }
    
    .light-theme {
        background-color: #ffffff;
        color: #000000;
    }
    
    .message {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 4px;
        color: white;
        z-index: 1000;
    }
    
    .message.success {
        background-color: #4caf50;
    }
    
    .message.error {
        background-color: #f44336;
    }
</style>
